group LetaTemplate;

returnValueDefault ::= 
[
"int":"0",
"long":"0",
"float":"0.0",
"double":"0.0",
"boolean":"false",
"byte":"0",
"short":"0",
"char":"0",
default:"null"
]

generateLeta(testCases) ::= 
<<
<testCases; separator="\n">
>>

generateStatement(testCase) ::= 
<<
<testCase>

>>

generateTestCase(id, verifyClause, whenClause, setClause, packageName, elements) ::= 
<<
\<fo name='<packageName>/<id>Test'>
<if (packageName)>package <packageName>;<endif>

import org.junit.Test;
import static org.junit.Assert.*;

<bodyTest(id=id, verifyClause=verifyClause, whenClause=whenClause, setClause=setClause, elements=elements)>

\</fo>
>>

bodyTest(id, verifyClause, whenClause, setClause, elements) ::=
<<
public abstract class <id>Test {

    // Gera todas as classes que correspondem aos termos
    <elements: { element | <generateClass(element)>}>
    
    
    // TCOutput
    <generateFactExpression(initial="Verify", element=verifyClause.element)>
    
    class TCOutput {
        <generateIO(initial="Verify", instance="verify", element=verifyClause.element)>
    }

    // TCInput
    <generateFactExpression(initial="When", element=whenClause.element)>
    
    class TCInput {
        <generateIO(initial="When", instance="when", element=whenClause.element)>
    }


    // Método que será implementado e enviará os dados ao SUT
    abstract TCOutput sendToSut(TCInput input);
    
    <if (!setClause.matrix)>
    // No Matrix
    @Test
    public void test() {

        // Verify
        TCOutput expected = new TCOutput();
        <generateInstanceDeclarations(object="expected", initial="verify", element=verifyClause.element)><\n>
        
        // When
        TCInput input = new TCInput();
        <generateInstanceDeclarations(object="input", initial="when", element=whenClause.element)>

        // Executa o método sendToSut
        TCOutput result = sendToSut(input);

        // Compara os resultados com os valores esperados
        <generateAsserts(initial="verify", element=verifyClause.element)>

    }
    
    <else>
    // Matrix
    <bodyMatrixTest(verifyClause=verifyClause, whenClause=whenClause, matrix=setClause.matrix)>
    <endif>
    
    <operators()>
}
>>


bodyMatrixTest(verifyClause, whenClause, matrix) ::=
<<
<if (matrix.iterator.hasNext)>
@Test
void test<matrix.sequence>() {

    // Verify
    <generateInstanceDeclarations(object="expected", initial="verify", element=verifyClause.element)>

    // When
    <generateInstanceDeclarations(object="input", initial="when", element=whenClause.element)>


    TCOutput result = sendToSut(input);

    //assertEquals(expected, result);

}
    
<bodyMatrixTest(verifyClause=verifyClause, whenClause=whenClause, matrix=matrix)>
<endif>
>>



generateAsserts(initial, element) ::=
<<
<if (element.composite)>
<generateAsserts(initial=initial, element=element.left)>
<generateAsserts(initial=element.instanceName, element=element.right)>
<elseif (element.methodElement)>
<generateAssertItem(initial=initial, parent=element, current=element)>
<endif>
>>

generateAssertItem(initial, parent, current) ::=
<<
<if (current.methodElement)>
<if (current.methodElement.classElement)>
<if (current.anyValue)>
assertTrue(
    Operator<if (current.relationalOperator)><current.relationalOperator><else>Equal<endif>.compare(
        expected.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>, 
        result.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>
    )
);
<endif>
<else>
assertTrue(
    OperatorEqual.compare(
        expected.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>, 
        result.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>
    )
);
<endif>
<else>
<if (current.anyValue)>
assertTrue(
    Operator<if (current.relationalOperator)><current.relationalOperator><else>Equal<endif>.compare(
        expected.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>, 
        result.<initial><generateAssertFact(parent)>().<generateAssertTerm(current)>
    )
);
<endif>
<endif>

<if (current.methodElement)><if (current.methodElement.classElement)>
<generateAssertItem(initial=initial, parent=parent, current=current.methodElement.classElement)>
<endif><endif>
>>

generateAssertFact(element) ::=
<<
<element.className><if (element.methodElement)><element.methodElement.methodName><if (element.methodElement.classElement)><generateAssertFact(element.methodElement.classElement)><endif><endif>
>>

generateAssertTerm(element) ::=
<<
<if (element.anyValue)>
get<element.className>()<if (element.anyValue)>.get<if (element.stringValue)>String<elseif (element.intValue)>Integer<elseif (element.floatValue)>Float<elseif (element.dateValue)>Date<endif>Value()<endif>
<else>
get<element.className>().is<element.methodElement.methodName>()
<endif>
>>


// Generate instances
generateInstanceDeclarations(object, initial, element) ::=
<<
<if (element.composite)>
<generateInstanceDeclarations(object=object, initial=initial, element=element.left)>

<generateInstanceDeclarations(object=object, initial=element.instanceName, element=element.right)>
<elseif (element.methodElement)>
<object>.<initial><generateInstanceDeclarationMethod(element)>(
    <generateInstanceDeclarationParameter(element)>);
<endif>
>>

generateInstanceDeclarationMethod(element) ::=
<<
<element.className><if (element.methodElement)><element.methodElement.methodName><if (element.methodElement.classElement)><generateInstanceDeclarationMethod(element.methodElement.classElement)><endif><endif>
>>

generateInstanceDeclarationParameter(element) ::=
<<
<if (element.anyValue)>new <element.className>(<if (element.stringValue)><element.stringValue><elseif (element.floatValue)><element.floatValue><elseif (element.intValue)><element.intValue><elseif (element.dateValue)>"<element.dateValue.original>"<endif>)<if (element.methodElement)><if (element.methodElement.classElement)><if (element.methodElement.classElement.anyValue)>, <endif><endif><endif><endif>
<if (element.methodElement)><if (element.methodElement.classElement)><generateInstanceDeclarationParameter(element.methodElement.classElement)><else><if (element.anyValue)>, <endif>true<\n><endif><endif>
>>



generateInstanceAttributions(element) ::=
<<
<if (element.composite)>
<element.instanceName>.set<element.left.instanceClassName>(<element.left.instanceName>);
<element.instanceName>.set<element.right.instanceClassName>(<element.right.instanceName>);
<generateInstanceAttributions(element.left)>
<generateInstanceAttributions(element.right)>
<else>
<if (element.methodElement)>
<if (element.methodElement.classElement)>
<if (element.methodElement.classElement.quantifier)>
<element.instanceName>.add<element.methodElement.className><element.methodElement.classElement.className>(<element.methodElement.classElement.instanceName>);<\n><generateInstanceAttributions(element.methodElement.classElement)>
<else> 
<element.instanceName>.set<element.methodElement.className><element.methodElement.classElement.className>(<element.methodElement.classElement.instanceName>);<\n><generateInstanceAttributions(element.methodElement.classElement)>
<endif>
<endif>
<endif>
<endif>
>>




generateClass(classElement) ::=
<<
<if (!classElement.composite)>
class <classElement.className> {
    
    <classElement.className>() {
    }
    
<if (classElement.stringValue)>
    private String sValue;

    <classElement.className>(String value) { this.sValue = value; }
    String getStringValue() { return this.sValue; }
<elseif (classElement.floatValue)>
    private Double dValue;

    <classElement.className>(Double value) { this.dValue = value; }
    Double getDoubleValue() { return this.dValue; }
<elseif (classElement.intValue)>
    private Integer iValue;

    <classElement.className>(Integer value) { this.iValue = value; }
    Integer getIntegerValue() { return this.iValue; }
<elseif (classElement.dateValue)>
    private String dtValue;
    
    <classElement.className>(String value) { this.dtValue = value; }
    String getDateValue() { return this.dtValue; }
<endif>

<classElement.methodElements: { m | <generateMethod(m)>}>

}<\n>
<endif>
>>

generateMethod(methodElement) ::=
<<
<if (methodElement.classElement.quantifier)>
    // List\<Class> instance = new ArrayList\<Class>();
    private java.util.List\<<methodElement.classElement.className>\> <methodInstanceName(methodElement)> = new java.util.ArrayList\<<methodElement.classElement.className>\>();

    // List\<Class> getInstanceQuantifierValueClass() { return instance; }
    java.util.List\<<methodElement.classElement.className>\> get<methodNameAndQuantifier(methodElement)>() {
        return this.<methodInstanceName(methodElement)>; 
    }
    
    // void setInstanceQuantifierValueClass(List\<Class> instance) { this.instance = instance; }
    void set<methodNameAndQuantifier(methodElement)>(java.util.List\<<methodElement.classElement.className>\> <methodInstanceName(methodElement)>) {
        this.<methodInstanceName(methodElement)> = <methodInstanceName(methodElement)>;
    }
    
    // void addInstanceClass(Class instance) { this.instance.add(instance); }
    void add<methodClassName(methodElement)>(<methodElement.classElement.className> <methodInstanceName(methodElement)>) {
        this.<methodInstanceName(methodElement)>.add(<methodInstanceName(methodElement)>);
    }
<elseif (methodElement.classElement)>
    // Class methodClass;
    private <methodElement.classElement.className> <methodInstanceName(methodElement)>;
    
    // Class getMethodClass() { return instance; }
    <methodElement.classElement.className> get<methodClassName(methodElement)>() {
        return this.<methodInstanceName(methodElement)>; 
    }
    
    // void setMethodClass(Class instance) { this.instance = instance; }
    void set<methodClassName(methodElement)>(<methodElement.classElement.className> <methodInstanceName(methodElement)>) {
        this.<methodInstanceName(methodElement)> = <methodInstanceName(methodElement)>;
    }
    
    // Class methodClassClass(String value) { this.instance = new Class(value); }
    <if (methodElement.classElement.anyValue)>
    <if (methodElement.classElement.stringValue)>
    <methodElement.classElement.className> <methodInstanceName(methodElement)>(String value) {
        return this.<methodInstanceName(methodElement)> = new <methodElement.classElement.className>(value);
    }
    <elseif (methodElement.classElement.floatValue)>
    <methodElement.classElement.className> <methodInstanceName(methodElement)>(Double value) {
        return this.<methodInstanceName(methodElement)> = new <methodElement.classElement.className>(value);
    }
    <elseif (methodElement.classElement.intValue)>
    <methodElement.classElement.className> <methodInstanceName(methodElement)>(Integer value) {
        return this.<methodInstanceName(methodElement)> = new <methodElement.classElement.className>(value);
    }
    <elseif (methodElement.classElement.dateValue)>
    <methodElement.classElement.className> <methodInstanceName(methodElement)>(String value) {
        return this.<methodInstanceName(methodElement)> = new <methodElement.classElement.className>(value);
    }
    <endif>
  <else>
    <methodElement.classElement.className> <methodInstanceName(methodElement)>() {
        return this.<methodInstanceName(methodElement)> = new <methodElement.classElement.className>();
    }
  <endif>
<else>
    // boolean instance;
    private boolean <methodElement.instanceName> = true;
    
    // boolean isInstance() { return instance; }
    boolean is<methodElement.methodName>() {
        return this.<methodElement.instanceName>; 
    }
    
    // void setInstance(boolean instance) { this.instance = instance; }
    void set<methodElement.methodName>(boolean <methodElement.instanceName>) {
        this.<methodElement.instanceName> = <methodElement.instanceName>;
    }<\n>
<endif>

>>

methodNameAndQuantifier(methodElement) ::=
<<
<methodElement.methodName><methodElement.classElement.quantifier.typeName><methodElement.classElement.quantifier.value><methodElement.classElement.className>
>>

methodInstanceName(methodElement) ::=
<<
<methodElement.instanceName><methodElement.classElement.className>
>>

methodClassName(methodElement) ::=
<<
<methodElement.methodName><methodElement.classElement.className>
>>


// TCInput and TCOutput
generateIO(initial, instance, element) ::=
<<
<if (element.composite)>
<generateIOClass(initial=initial, instance=instance, element=element.left)>
<generateIO(initial=element.className, instance=element.instanceName, element=element.right)>
<else>
<generateIOClass(initial=initial, instance=instance, element=element)>
<endif>
>>

generateIOClass(initial, instance, element) ::=
<<
private <initial><generateFactExpressionName(element)> <instance><generateFactExpressionName(element)>;

<initial><generateFactExpressionName(element)> <instance><generateFactExpressionName(element)>(
        <generateIOClassParameter(element)>
        ) {
    return this.<instance><generateFactExpressionName(element)> = new
        <initial><generateFactExpressionName(element)>(
            <generateIOClassInstance(element)>
            );
}
<initial><generateFactExpressionName(element)> <instance><generateFactExpressionName(element)>() {
    return this.<instance><generateFactExpressionName(element)>;
}

>>

generateIOClassParameter(element) ::=
<<
<if (element.anyValue)><element.className> <element.instanceName><if (element.methodElement)><if (element.methodElement.classElement)><if (element.methodElement.classElement.anyValue)>, <endif><endif><endif><endif>
<if (element.methodElement)><if (element.methodElement.classElement)><generateIOClassParameter(element.methodElement.classElement)><else><if (element.anyValue)>, <endif>boolean value<\n><endif><endif>
>>

generateIOClassInstance(element) ::=
<<
<if (element.anyValue)><element.instanceName><if (element.methodElement)><if (element.methodElement.classElement)><if (element.methodElement.classElement.anyValue)>, <endif><endif><endif><endif>
<if (element.methodElement)><if (element.methodElement.classElement)><generateIOClassInstance(element.methodElement.classElement)><else><if (element.anyValue)>, <endif>value<\n><endif><endif>
>>


generateFactExpression(initial, element) ::=
<<
<if (element.composite)>
<generateFactExpressionClass(initial=initial, element=element.left)>

<generateFactExpression(initial=element.className, element=element.right)>
<else>
<generateFactExpressionClass(initial=initial, element=element)>
<endif>

>>

generateFactExpressionClass(initial, element) ::=
<<
class <initial><generateFactExpressionName(element)> {

    <generateFactExpressionDeclaration(element)>
    <initial><generateFactExpressionName(element)>(
        <generateFactExpressionParameter(element)>
        ) {
        <generateFactExpressionAttribution(element)>
        <generateFactExpressionSetter(element)>
    }
}
>>

generateFactExpressionDeclaration(element) ::=
<<
private <element.className> <element.instanceName> = new <element.className>();
<element.className> get<element.className>() { return this.<element.instanceName>; }
<if (element.methodElement)><if (element.methodElement.classElement)><generateFactExpressionDeclaration(element.methodElement.classElement)><endif><endif>
>>

generateFactExpressionName(element) ::=
<<
<element.className><if (element.methodElement)><element.methodElement.methodName><if (element.methodElement.classElement)><generateFactExpressionName(element.methodElement.classElement)><endif><endif>
>>

generateFactExpressionParameter(element) ::=
<<
<if (element.anyValue)><element.className> <element.instanceName><if (element.methodElement)><if (element.methodElement.classElement)><if (element.methodElement.classElement.anyValue)>, <endif><endif><endif><endif>
<if (element.methodElement)><if (element.methodElement.classElement)><generateFactExpressionParameter(element.methodElement.classElement)><else><if (element.anyValue)>, <endif>boolean value<\n><endif><endif>
>>

generateFactExpressionAttribution(element) ::=
<<
<if (element.anyValue)>this.<element.instanceName> = <element.instanceName>;<endif>
<if (element.methodElement)><if (element.methodElement.classElement)><generateFactExpressionAttribution(element.methodElement.classElement)><endif><endif>
>>

generateFactExpressionSetter(element) ::=
<<
<if (element.methodElement)><if (element.methodElement.classElement)>
this.<element.instanceName>.set<element.methodElement.className><element.methodElement.classElement.className>(this.<element.methodElement.classElement.instanceName>);
<generateFactExpressionSetter(element.methodElement.classElement)>
<else>
this.<element.instanceName>.set<element.methodElement.className>(value);
<endif><endif>
>>




generateCompositeConstructor(composite) ::=
<<
<composite.className>(<composite.left.className> <composite.left.instanceName>, <composite.right.className> <composite.right.instanceName>) {
    this.<composite.left.instanceName> = <composite.left.instanceName>;
    this.<composite.right.instanceName> = <composite.right.instanceName>;
}
>>



operators() ::=
<<
static abstract class Operator {
}

static abstract class OperatorString extends Operator {
}

static abstract class OperatorNumber extends Operator {
    static boolean verify(Object obj1, Object obj2) {
        return ((obj1 instanceof Integer || obj1 instanceof Double)
            && (obj2 instanceof Integer || obj2 instanceof Double));
    }
}

static class OperatorEqual extends OperatorString {
    static boolean compare(Object obj1, Object obj2) {
        return obj1.equals(obj2);
    }
}

static class OperatorNotEqual extends Operator {
    static boolean compare(Object obj1, Object obj2) {
        return !obj1.equals(obj2);
    }
}

static class OperatorLessThan extends OperatorNumber {
    static boolean compare(Object obj1, Object obj2) {
        if (verify(obj1, obj2))
            return ((Double) obj1).compareTo((Double) obj2) \> 0;

        return false;
    }
}

static class OperatorEqualOrLessThan extends OperatorNumber {
    static boolean compare(Object obj1, Object obj2) {
        if (verify(obj1, obj2))
            return ((Double) obj1).compareTo((Double) obj2) \>= 0;

        return false;
    }
}

static class OperatorMoreThan extends OperatorNumber {
    static boolean compare(Object obj1, Object obj2) {
        if (verify(obj1, obj2))
            return ((Double) obj1).compareTo((Double) obj2) \< 0;
        
        return false;
    }
}

static class OperatorEqualOrMoreThan extends OperatorNumber {
    static boolean compare(Object obj1, Object obj2) {
        if (verify(obj1, obj2))
            return ((Double) obj1).compareTo((Double) obj2) \<= 0;
       
       return false;
    }
}
>>







generateEqualsByMethodElement(methodElement) ::=
<<
<if (methodElement.classElement.quantifier)>
if (this.<methodElement.instanceName><methodElement.classElement.className> != null &&
    o.<methodElement.instanceName><methodElement.classElement.className> != null)
    valid = valid & (o.<methodElement.instanceName><methodElement.classElement.className>.size() <methodElement.classElement.quantifier.operator> <methodElement.classElement.quantifier.value>);
<elseif (methodElement.classElement)>
if (this.<methodElement.instanceName><methodElement.classElement.className> != null &&
    o.<methodElement.instanceName><methodElement.classElement.className> != null)
    valid = valid & this.<methodElement.instanceName><methodElement.classElement.className>.equals(o.<methodElement.instanceName><methodElement.classElement.className>);<\n>
<else>
valid = valid & (this.is<methodElement.methodName>() == o.is<methodElement.methodName>());<\n>
<endif>

>>

generateEqualsByClassElement(classElement) ::=
<<
if (this.<classElement.instanceName> != null &&
    o.<classElement.instanceName> != null)
    valid = valid & this.<classElement.instanceName>.equals(o.<classElement.instanceName>);<\n>
    
    
    

    public boolean equals(Object obj) {
        if (obj instanceof <classElement.className>) {
        <if (classElement.methodElements)>
            <classElement.className> o = (<classElement.className>) obj;
            boolean validValue = true;
            boolean valid = true;

            <if (classElement.stringValue)>
            if (this.sValue != null && o.sValue != null && !operator.compare(this.sValue, o.sValue))
                validValue = false;
            <endif>
            <if (classElement.floatValue)>
            if (this.dValue != null && o.dValue != null && !operator.compare(this.dValue, o.dValue))
                validValue = false;
            <endif>
            <if (classElement.intValue)>
            if (this.iValue != null && o.iValue != null && !operator.compare(this.iValue, o.iValue))
                validValue = false;
            <endif>
            
            <classElement.methodElements: { m | <generateEqualsByMethodElement(m)>}>
            
            return validValue && valid;
        <else>
            return true;
        <endif>
        }
        
        return false;
    }
        
>>






